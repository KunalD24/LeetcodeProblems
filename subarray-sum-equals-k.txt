typedef struct Node {
    int sum;
    int count;
    struct Node *next;
} Node;

#define TABLE_SIZE 1000

Node* hashTable[TABLE_SIZE] = {NULL};


unsigned int hash(int key) {
    return (unsigned int)(key % TABLE_SIZE + TABLE_SIZE) % TABLE_SIZE;
}

void insert(int sum, int count) {
    unsigned int index = hash(sum);
    Node *temp = hashTable[index];
    while (temp != NULL) {
        if (temp->sum == sum) {
            temp->count += count;
            return;
        }
        temp = temp->next;
    }
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->sum = sum;
    newNode->count = count;
    newNode->next = hashTable[index];
    hashTable[index] = newNode;
}

int getCount(int sum) {
    unsigned int index = hash(sum);
    Node *temp = hashTable[index];
    while (temp != NULL) {
        if (temp->sum == sum) {
            return temp->count;
        }
        temp = temp->next;
    }
    return 0;
}

int subarraySum(int* nums, int numsSize, int k) {

    for (int i = 0; i < TABLE_SIZE; i++)
        hashTable[i] = NULL;

    int count = 0;
    int prefixSum = 0;

    insert(0, 1); 

    for (int i = 0; i < numsSize; i++) {
        prefixSum += nums[i];

        
        count += getCount(prefixSum - k);

        insert(prefixSum, 1);
    }

    return count;
}