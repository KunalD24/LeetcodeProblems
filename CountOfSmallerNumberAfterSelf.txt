#include <stdio.h>
#include <stdlib.h>

typedef enum { RED, BLACK } Color;

typedef struct RBTNode {
    int val;
    int count;
    int leftSize;
    Color color;
    struct RBTNode* left;
    struct RBTNode* right;
    struct RBTNode* parent;
} RBTNode;

typedef struct {
    RBTNode* root;
    RBTNode* nil;
} RBTree;

RBTNode* newNode(RBTree* tree, int val) {
    RBTNode* node = (RBTNode*)malloc(sizeof(RBTNode));
    node->val = val;
    node->count = 1;
    node->leftSize = 0;
    node->color = RED;
    node->left = node->right = node->parent = tree->nil;
    return node;
}

void leftRotate(RBTree* tree, RBTNode* x) {
    RBTNode* y = x->right;
    x->right = y->left;
    if (y->left != tree->nil) y->left->parent = x;
    y->parent = x->parent;
    if (x->parent == tree->nil) tree->root = y;
    else if (x == x->parent->left) x->parent->left = y;
    else x->parent->right = y;
    y->left = x;
    x->parent = y;
}

void rightRotate(RBTree* tree, RBTNode* y) {
    RBTNode* x = y->left;
    y->left = x->right;
    if (x->right != tree->nil) x->right->parent = y;
    x->parent = y->parent;
    if (y->parent == tree->nil) tree->root = x;
    else if (y == y->parent->left) y->parent->left = x;
    else y->parent->right = x;
    x->right = y;
    y->parent = x;
}

void insertFixup(RBTree* tree, RBTNode* z) {
    while (z->parent->color == RED) {
        if (z->parent == z->parent->parent->left) {
            RBTNode* y = z->parent->parent->right;
            if (y->color == RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->right) {
                    z = z->parent;
                    leftRotate(tree, z);
                }
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                rightRotate(tree, z->parent->parent);
            }
        } else {
            RBTNode* y = z->parent->parent->left;
            if (y->color == RED) {
                z->parent->color = BLACK;
                y->color = BLACK;
                z->parent->parent->color = RED;
                z = z->parent->parent;
            } else {
                if (z == z->parent->left) {
                    z = z->parent;
                    rightRotate(tree, z);
                }
                z->parent->color = BLACK;
                z->parent->parent->color = RED;
                leftRotate(tree, z->parent->parent);
            }
        }
    }
    tree->root->color = BLACK;
}

RBTNode* insert(RBTree* tree, int val, int* smallerCount) {
    RBTNode* y = tree->nil;
    RBTNode* x = tree->root;
    RBTNode* z = newNode(tree, val);
    *smallerCount = 0;

    while (x != tree->nil) {
        y = x;
        if (val == x->val) {
            x->count++;
            *smallerCount += x->leftSize;
            free(z);
            return x;
        } else if (val < x->val) {
            x->leftSize++;
            x = x->left;
        } else {
            *smallerCount += x->leftSize + x->count;
            x = x->right;
        }
    }
    z->parent = y;
    if (y == tree->nil) tree->root = z;
    else if (val < y->val) y->left = z;
    else y->right = z;

    insertFixup(tree, z);
    return z;
}

void freeTree(RBTree* tree, RBTNode* node) {
    if (node == tree->nil) return;
    freeTree(tree, node->left);
    freeTree(tree, node->right);
    free(node);
}

int* countSmaller(int* nums, int numsSize, int* returnSize) {
    *returnSize = numsSize;
    int* result = (int*)malloc(sizeof(int) * numsSize);

    RBTree tree;
    tree.nil = (RBTNode*)malloc(sizeof(RBTNode));
    tree.nil->color = BLACK;
    tree.nil->left = tree.nil->right = tree.nil->parent = NULL;
    tree.root = tree.nil;

    for (int i = numsSize - 1; i >= 0; i--) {
        int smaller = 0;
        insert(&tree, nums[i], &smaller);
        result[i] = smaller;
    }

    freeTree(&tree, tree.root);
    free(tree.nil);

    return result;
}
