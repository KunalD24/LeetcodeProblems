#include <stdio.h>
#include <stdlib.h>

#define MOD 1000000007

typedef struct AVLNode {
    int key;
    int count;      
    int height;
    int size;       
    struct AVLNode *left, *right;
} AVLNode;

int height(AVLNode *node) {
    return node ? node->height : 0;
}

int size(AVLNode *node) {
    return node ? node->size : 0;
}

int max(int a, int b) {
    return a > b ? a : b;
}

AVLNode* newNode(int key) {
    AVLNode* node = (AVLNode*)malloc(sizeof(AVLNode));
    node->key = key;
    node->count = 1;
    node->height = 1;
    node->size = 1;
    node->left = node->right = NULL;
    return node;
}

void update(AVLNode *node) {
    if (!node) return;
    node->height = 1 + max(height(node->left), height(node->right));
    node->size = node->count + size(node->left) + size(node->right);
}

AVLNode* rightRotate(AVLNode* y) {
    AVLNode* x = y->left;
    AVLNode* T2 = x->right;

    x->right = y;
    y->left = T2;

    update(y);
    update(x);

    return x;
}

AVLNode* leftRotate(AVLNode* x) {
    AVLNode* y = x->right;
    AVLNode* T2 = y->left;

    y->left = x;
    x->right = T2;

    update(x);
    update(y);

    return y;
}

int getBalance(AVLNode* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

AVLNode* insert(AVLNode* node, int key, int* lessCount, int* greaterCount) {
    if (!node) {
        return newNode(key);
    }

    if (key < node->key) {
        *greaterCount += node->count + size(node->right);
        node->left = insert(node->left, key, lessCount, greaterCount);
    } else if (key > node->key) {
        *lessCount += node->count + size(node->left);
        node->right = insert(node->right, key, lessCount, greaterCount);
    } else {
        node->count++;
        *lessCount += size(node->left);
        *greaterCount += size(node->right);
    }

    update(node);

    int balance = getBalance(node);

    if (balance > 1 && key < node->left->key) return rightRotate(node);
    
    if (balance < -1 && key > node->right->key) return leftRotate(node);
    
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

int createSortedArray(int* instructions, int instructionsSize) {
    AVLNode* root = NULL;
    long ans = 0;

    for (int i = 0; i < instructionsSize; i++) {
        int less = 0, greater = 0;
        root = insert(root, instructions[i], &less, &greater);
        ans = (ans + (less < greater ? less : greater)) % MOD;
    }

    return (int)ans;
}
