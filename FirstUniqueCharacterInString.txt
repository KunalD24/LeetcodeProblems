#define HASH_SIZE 256

typedef struct HashNode {
    char character;
    int frequency;
    struct HashNode *next;
} HashNode;

HashNode* table[HASH_SIZE];

void initTable() {
    for (int i = 0; i < HASH_SIZE; i++) {
        table[i] = NULL;
    }
}

unsigned int hashFunc(char ch) {
    return (unsigned char)ch;
}

void addChar(char ch) {
    unsigned int idx = hashFunc(ch);
    HashNode *cur = table[idx];
    while (cur) {
        if (cur->character == ch) {
            cur->frequency++;
            return;
        }
        cur = cur->next;
    }
    HashNode *newNode = (HashNode*)malloc(sizeof(HashNode));
    newNode->character = ch;
    newNode->frequency = 1;
    newNode->next = table[idx];
    table[idx] = newNode;
}

int getFrequency(char ch) {
    unsigned int idx = hashFunc(ch);
    HashNode *cur = table[idx];
    while (cur) {
        if (cur->character == ch) return cur->frequency;
        cur = cur->next;
    }
    return 0;
}

int firstUniqChar(char* s) {
    initTable();
    for (int i = 0; s[i] != '\0'; i++) {
        addChar(s[i]);
    }
    for (int i = 0; s[i] != '\0'; i++) {
        if (getFrequency(s[i]) == 1) return i;
    }
    return -1;
}
